
LED_OnOff_Command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003424  08003424  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003424  08003424  00004424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800342c  0800342c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0000442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003430  08003430  00004430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003434  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000001c  08003450  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003450  000050d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfd7  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efa  00000000  00000000  00012023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00013f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e8  00000000  00000000  00014978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c62e  00000000  00000000  00015160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c949  00000000  00000000  0003178e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b36e1  00000000  00000000  0003e0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f17b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002974  00000000  00000000  000f17fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f4170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800334c 	.word	0x0800334c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	0800334c 	.word	0x0800334c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0a0      	sub	sp, #128	@ 0x80
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fba7 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8fd 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f991 	bl	8000878 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000556:	f000 f945 	bl	80007e4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fad6 	bl	8000b0c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000560:	2101      	movs	r1, #1
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fb08 	bl	8000b78 <BSP_PB_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	  uint8_t rxBuffer[8] = {0};
 8000568:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
	      uint8_t msg[] = "Enter 'on', 'off', or 'status':\r\n";
 8000572:	4b6b      	ldr	r3, [pc, #428]	@ (8000720 <main+0x1dc>)
 8000574:	463c      	mov	r4, r7
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000580:	682b      	ldr	r3, [r5, #0]
 8000582:	8023      	strh	r3, [r4, #0]
	      HAL_UART_Transmit(&hlpuart1, msg, sizeof(msg)-1, HAL_MAX_DELAY);
 8000584:	4639      	mov	r1, r7
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	2221      	movs	r2, #33	@ 0x21
 800058c:	4865      	ldr	r0, [pc, #404]	@ (8000724 <main+0x1e0>)
 800058e:	f001 ff5b 	bl	8002448 <HAL_UART_Transmit>

	     // Read input until Enter is pressed (CR or LF)
	      uint8_t idx = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	      uint8_t ch;
	      while (idx < sizeof(rxBuffer) - 1) {
 8000598:	e01a      	b.n	80005d0 <main+0x8c>
	          HAL_UART_Receive(&hlpuart1, &ch, 1, HAL_MAX_DELAY);
 800059a:	f107 0173 	add.w	r1, r7, #115	@ 0x73
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	2201      	movs	r2, #1
 80005a4:	485f      	ldr	r0, [pc, #380]	@ (8000724 <main+0x1e0>)
 80005a6:	f001 ffdd 	bl	8002564 <HAL_UART_Receive>
	          if (ch == '\r' || ch == '\n') {
 80005aa:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80005ae:	2b0d      	cmp	r3, #13
 80005b0:	d012      	beq.n	80005d8 <main+0x94>
 80005b2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80005b6:	2b0a      	cmp	r3, #10
 80005b8:	d00e      	beq.n	80005d8 <main+0x94>
	              break;
	          }
	          rxBuffer[idx++] = ch;
 80005ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 80005c4:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80005c8:	3380      	adds	r3, #128	@ 0x80
 80005ca:	443b      	add	r3, r7
 80005cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	      while (idx < sizeof(rxBuffer) - 1) {
 80005d0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80005d4:	2b06      	cmp	r3, #6
 80005d6:	d9e0      	bls.n	800059a <main+0x56>
	      }
	      rxBuffer[idx] = '\0';
 80005d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80005dc:	3380      	adds	r3, #128	@ 0x80
 80005de:	443b      	add	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	f803 2c0c 	strb.w	r2, [r3, #-12]

	      // Simple string compare for "on" or "off"
	      if ((strncmp((char*)rxBuffer, "on", 2) == 0)) {
 80005e6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80005ea:	2202      	movs	r2, #2
 80005ec:	494e      	ldr	r1, [pc, #312]	@ (8000728 <main+0x1e4>)
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fe76 	bl	80032e0 <strncmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d116      	bne.n	8000628 <main+0xe4>
	          uint8_t resp[] = "You entered ON\r\n";
 80005fa:	4b4c      	ldr	r3, [pc, #304]	@ (800072c <main+0x1e8>)
 80005fc:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	682b      	ldr	r3, [r5, #0]
 8000608:	7023      	strb	r3, [r4, #0]
	          HAL_UART_Transmit(&hlpuart1, resp, sizeof(resp)-1, HAL_MAX_DELAY);
 800060a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2210      	movs	r2, #16
 8000614:	4843      	ldr	r0, [pc, #268]	@ (8000724 <main+0x1e0>)
 8000616:	f001 ff17 	bl	8002448 <HAL_UART_Transmit>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // Turn LED ON
 800061a:	2201      	movs	r2, #1
 800061c:	2120      	movs	r1, #32
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f000 fed7 	bl	80013d4 <HAL_GPIO_WritePin>
 8000626:	e076      	b.n	8000716 <main+0x1d2>
	      } else if ((strncmp((char*)rxBuffer, "off", 3) == 0)) {
 8000628:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800062c:	2203      	movs	r2, #3
 800062e:	4940      	ldr	r1, [pc, #256]	@ (8000730 <main+0x1ec>)
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fe55 	bl	80032e0 <strncmp>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d116      	bne.n	800066a <main+0x126>
	          uint8_t resp[] = "You entered OFF\r\n";
 800063c:	4b3d      	ldr	r3, [pc, #244]	@ (8000734 <main+0x1f0>)
 800063e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	8023      	strh	r3, [r4, #0]
	          HAL_UART_Transmit(&hlpuart1, resp, sizeof(resp)-1, HAL_MAX_DELAY);
 800064c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	2211      	movs	r2, #17
 8000656:	4833      	ldr	r0, [pc, #204]	@ (8000724 <main+0x1e0>)
 8000658:	f001 fef6 	bl	8002448 <HAL_UART_Transmit>
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED OFF
 800065c:	2200      	movs	r2, #0
 800065e:	2120      	movs	r1, #32
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f000 feb6 	bl	80013d4 <HAL_GPIO_WritePin>
 8000668:	e055      	b.n	8000716 <main+0x1d2>
	      } else if ((strncmp((char*)rxBuffer, "status", 5) ==0)) {
 800066a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800066e:	2205      	movs	r2, #5
 8000670:	4931      	ldr	r1, [pc, #196]	@ (8000738 <main+0x1f4>)
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fe34 	bl	80032e0 <strncmp>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d13d      	bne.n	80006fa <main+0x1b6>
	          uint8_t resp[] = "LED is ";
 800067e:	4a2f      	ldr	r2, [pc, #188]	@ (800073c <main+0x1f8>)
 8000680:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000688:	e883 0003 	stmia.w	r3, {r0, r1}
	          HAL_UART_Transmit(&hlpuart1, resp, sizeof(resp)-1, HAL_MAX_DELAY);
 800068c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	2207      	movs	r2, #7
 8000696:	4823      	ldr	r0, [pc, #140]	@ (8000724 <main+0x1e0>)
 8000698:	f001 fed6 	bl	8002448 <HAL_UART_Transmit>
	          if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) {
 800069c:	2120      	movs	r1, #32
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f000 fe7f 	bl	80013a4 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10d      	bne.n	80006c8 <main+0x184>
	            uint8_t resp[] = "ON\r\n";
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <main+0x1fc>)
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80006b0:	2300      	movs	r3, #0
 80006b2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	            HAL_UART_Transmit(&hlpuart1, resp, sizeof(resp)-1, HAL_MAX_DELAY);
 80006b6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	2204      	movs	r2, #4
 80006c0:	4818      	ldr	r0, [pc, #96]	@ (8000724 <main+0x1e0>)
 80006c2:	f001 fec1 	bl	8002448 <HAL_UART_Transmit>
 80006c6:	e026      	b.n	8000716 <main+0x1d2>
	          } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET) {
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f000 fe69 	bl	80013a4 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d11e      	bne.n	8000716 <main+0x1d2>
	            uint8_t resp[] = "OFF\r\n";
 80006d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000744 <main+0x200>)
 80006da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e2:	6018      	str	r0, [r3, #0]
 80006e4:	3304      	adds	r3, #4
 80006e6:	8019      	strh	r1, [r3, #0]
	            HAL_UART_Transmit(&hlpuart1, resp, sizeof(resp)-1, HAL_MAX_DELAY);
 80006e8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2205      	movs	r2, #5
 80006f2:	480c      	ldr	r0, [pc, #48]	@ (8000724 <main+0x1e0>)
 80006f4:	f001 fea8 	bl	8002448 <HAL_UART_Transmit>
 80006f8:	e00d      	b.n	8000716 <main+0x1d2>
	          }
	      }
	      else {
	          uint8_t resp[] = "Invalid input\r\n";
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <main+0x204>)
 80006fc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	          HAL_UART_Transmit(&hlpuart1, resp, sizeof(resp)-1, HAL_MAX_DELAY);
 8000706:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	220f      	movs	r2, #15
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <main+0x1e0>)
 8000712:	f001 fe99 	bl	8002448 <HAL_UART_Transmit>
	      }

	      HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071a:	f000 fb2f 	bl	8000d7c <HAL_Delay>
  {
 800071e:	e723      	b.n	8000568 <main+0x24>
 8000720:	08003374 	.word	0x08003374
 8000724:	20000038 	.word	0x20000038
 8000728:	08003364 	.word	0x08003364
 800072c:	08003398 	.word	0x08003398
 8000730:	08003368 	.word	0x08003368
 8000734:	080033ac 	.word	0x080033ac
 8000738:	0800336c 	.word	0x0800336c
 800073c:	080033c0 	.word	0x080033c0
 8000740:	0a0d4e4f 	.word	0x0a0d4e4f
 8000744:	080033c8 	.word	0x080033c8
 8000748:	080033d0 	.word	0x080033d0

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2238      	movs	r2, #56	@ 0x38
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fdb8 	bl	80032d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000772:	f000 fe47 	bl	8001404 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2340      	movs	r3, #64	@ 0x40
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800078c:	2301      	movs	r3, #1
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000790:	230a      	movs	r3, #10
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fee1 	bl	800156c <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007b0:	f000 f8b8 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2303      	movs	r3, #3
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2102      	movs	r1, #2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f9df 	bl	8001b90 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d8:	f000 f8a4 	bl	8000924 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	@ 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <MX_LPUART1_UART_Init+0x90>)
 80007ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000826:	4812      	ldr	r0, [pc, #72]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 8000828:	f001 fdbe 	bl	80023a8 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f877 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 800083a:	f002 fc7f 	bl	800313c <HAL_UARTEx_SetTxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000844:	f000 f86e 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 800084c:	f002 fcb4 	bl	80031b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000856:	f000 f865 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_LPUART1_UART_Init+0x8c>)
 800085c:	f002 fc35 	bl	80030ca <HAL_UARTEx_DisableFifoMode>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000866:	f000 f85d 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000038 	.word	0x20000038
 8000874:	40008000 	.word	0x40008000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <MX_GPIO_Init+0xa8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	4a23      	ldr	r2, [pc, #140]	@ (8000920 <MX_GPIO_Init+0xa8>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_GPIO_Init+0xa8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008ac:	f043 0320 	orr.w	r3, r3, #32
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0320 	and.w	r3, r3, #32
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_GPIO_Init+0xa8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f6:	f000 fd6d 	bl	80013d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008fa:	2320      	movs	r3, #32
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000914:	f000 fbc4 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	@ 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	@ 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000966:	f000 fdf1 	bl	800154c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b09a      	sub	sp, #104	@ 0x68
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	2244      	movs	r2, #68	@ 0x44
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fc99 	bl	80032d0 <memset>
  if(huart->Instance==LPUART1)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <HAL_UART_MspInit+0xa8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d136      	bne.n	8000a16 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009a8:	2320      	movs	r3, #32
 80009aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fb07 	bl	8001fc8 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ffb0 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <HAL_UART_MspInit+0xac>)
 80009c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009c8:	4a16      	ldr	r2, [pc, #88]	@ (8000a24 <HAL_UART_MspInit+0xac>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <HAL_UART_MspInit+0xac>)
 80009d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <HAL_UART_MspInit+0xac>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a10      	ldr	r2, [pc, #64]	@ (8000a24 <HAL_UART_MspInit+0xac>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <HAL_UART_MspInit+0xac>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|LPUART1_RX_Pin;
 80009f4:	230c      	movs	r3, #12
 80009f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a04:	230c      	movs	r3, #12
 8000a06:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a12:	f000 fb45 	bl	80010a0 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000a16:	bf00      	nop
 8000a18:	3768      	adds	r7, #104	@ 0x68
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40008000 	.word	0x40008000
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f95f 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f8e2 	bl	8000c54 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	@ (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	@ (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fc0d 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aea:	f7ff fd2b 	bl	8000544 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000afc:	08003434 	.word	0x08003434
  ldr r2, =_sbss
 8000b00:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b04:	200000d8 	.word	0x200000d8

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <BSP_LED_Init+0x64>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <BSP_LED_Init+0x64>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <BSP_LED_Init+0x64>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000b2e:	2320      	movs	r3, #32
 8000b30:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a0c      	ldr	r2, [pc, #48]	@ (8000b74 <BSP_LED_Init+0x68>)
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	f107 020c 	add.w	r2, r7, #12
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 faa7 	bl	80010a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <BSP_LED_Init+0x68>)
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fc38 	bl	80013d4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	20000004 	.word	0x20000004

08000b78 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000b88:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <BSP_PB_Init+0xc4>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c3c <BSP_PB_Init+0xc4>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b94:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <BSP_PB_Init+0xc4>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000ba0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10c      	bne.n	8000bce <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <BSP_PB_Init+0xc8>)
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	f107 020c 	add.w	r2, r7, #12
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fa6a 	bl	80010a0 <HAL_GPIO_Init>
 8000bcc:	e031      	b.n	8000c32 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bd2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <BSP_PB_Init+0xc8>)
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	f107 020c 	add.w	r2, r7, #12
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fa5c 	bl	80010a0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <BSP_PB_Init+0xcc>)
 8000bee:	441a      	add	r2, r3
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4915      	ldr	r1, [pc, #84]	@ (8000c48 <BSP_PB_Init+0xd0>)
 8000bf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f000 fa0c 	bl	8001018 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <BSP_PB_Init+0xcc>)
 8000c06:	1898      	adds	r0, r3, r2
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <BSP_PB_Init+0xd4>)
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	461a      	mov	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f000 f9e3 	bl	8000fde <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000c18:	2028      	movs	r0, #40	@ 0x28
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <BSP_PB_Init+0xd8>)
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	2200      	movs	r2, #0
 8000c24:	4619      	mov	r1, r3
 8000c26:	f000 f9a6 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000c2a:	2328      	movs	r3, #40	@ 0x28
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f9bc 	bl	8000faa <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200000cc 	.word	0x200000cc
 8000c48:	080033f8 	.word	0x080033f8
 8000c4c:	2000000c 	.word	0x2000000c
 8000c50:	20000010 	.word	0x20000010

08000c54 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <BSP_PB_IRQHandler+0x20>)
 8000c64:	4413      	add	r3, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f9ea 	bl	8001040 <HAL_EXTI_IRQHandler>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200000cc 	.word	0x200000cc

08000c78 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fff0 	bl	8000c78 <BSP_PB_Callback>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f000 f95a 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 f80d 	bl	8000ccc <HAL_InitTick>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	e001      	b.n	8000cc2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbe:	f7ff fe37 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]

}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_InitTick+0x68>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d022      	beq.n	8000d26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <HAL_InitTick+0x6c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <HAL_InitTick+0x68>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f966 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10f      	bne.n	8000d20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b0f      	cmp	r3, #15
 8000d04:	d809      	bhi.n	8000d1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d06:	2200      	movs	r2, #0
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0e:	f000 f932 	bl	8000f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_InitTick+0x70>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e004      	b.n	8000d2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e001      	b.n	8000d2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000018 	.word	0x20000018
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000014 	.word	0x20000014

08000d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <HAL_IncTick+0x1c>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a03      	ldr	r2, [pc, #12]	@ (8000d5c <HAL_IncTick+0x1c>)
 8000d50:	6013      	str	r3, [r2, #0]
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	200000d4 	.word	0x200000d4
 8000d60:	20000018 	.word	0x20000018

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000d4 	.word	0x200000d4

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d004      	beq.n	8000da0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_Delay+0x40>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da0:	bf00      	nop
 8000da2:	f7ff ffdf 	bl	8000d64 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8f7      	bhi.n	8000da2 <HAL_Delay+0x26>
  {
  }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000018 	.word	0x20000018

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	@ (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff40 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff90 	bl	8000eb4 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5f 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff33 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa4 	bl	8000f1c <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
      break;
 8000ffc:	e005      	b.n	800100a <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	75fb      	strb	r3, [r7, #23]
      break;
 8001008:	bf00      	nop
  }

  return status;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e003      	b.n	8001034 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001032:	2300      	movs	r3, #0
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0c1b      	lsrs	r3, r3, #16
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	2201      	movs	r2, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	015a      	lsls	r2, r3, #5
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_EXTI_IRQHandler+0x5c>)
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d009      	beq.n	8001092 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4798      	blx	r3
    }
  }
}
 8001092:	bf00      	nop
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010414 	.word	0x40010414

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ae:	e15a      	b.n	8001366 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	2101      	movs	r1, #1
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 814c 	beq.w	8001360 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d005      	beq.n	80010e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d130      	bne.n	8001142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001116:	2201      	movs	r2, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0201 	and.w	r2, r3, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b03      	cmp	r3, #3
 800114c:	d017      	beq.n	800117e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	6939      	ldr	r1, [r7, #16]
 80011ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0203 	and.w	r2, r3, #3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80a6 	beq.w	8001360 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001214:	4b5b      	ldr	r3, [pc, #364]	@ (8001384 <HAL_GPIO_Init+0x2e4>)
 8001216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001218:	4a5a      	ldr	r2, [pc, #360]	@ (8001384 <HAL_GPIO_Init+0x2e4>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001220:	4b58      	ldr	r3, [pc, #352]	@ (8001384 <HAL_GPIO_Init+0x2e4>)
 8001222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122c:	4a56      	ldr	r2, [pc, #344]	@ (8001388 <HAL_GPIO_Init+0x2e8>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001256:	d01f      	beq.n	8001298 <HAL_GPIO_Init+0x1f8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4c      	ldr	r2, [pc, #304]	@ (800138c <HAL_GPIO_Init+0x2ec>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d019      	beq.n	8001294 <HAL_GPIO_Init+0x1f4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4b      	ldr	r2, [pc, #300]	@ (8001390 <HAL_GPIO_Init+0x2f0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d013      	beq.n	8001290 <HAL_GPIO_Init+0x1f0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4a      	ldr	r2, [pc, #296]	@ (8001394 <HAL_GPIO_Init+0x2f4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d00d      	beq.n	800128c <HAL_GPIO_Init+0x1ec>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a49      	ldr	r2, [pc, #292]	@ (8001398 <HAL_GPIO_Init+0x2f8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0x1e8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a48      	ldr	r2, [pc, #288]	@ (800139c <HAL_GPIO_Init+0x2fc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_GPIO_Init+0x1e4>
 8001280:	2305      	movs	r3, #5
 8001282:	e00a      	b.n	800129a <HAL_GPIO_Init+0x1fa>
 8001284:	2306      	movs	r3, #6
 8001286:	e008      	b.n	800129a <HAL_GPIO_Init+0x1fa>
 8001288:	2304      	movs	r3, #4
 800128a:	e006      	b.n	800129a <HAL_GPIO_Init+0x1fa>
 800128c:	2303      	movs	r3, #3
 800128e:	e004      	b.n	800129a <HAL_GPIO_Init+0x1fa>
 8001290:	2302      	movs	r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x1fa>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_GPIO_Init+0x1fa>
 8001298:	2300      	movs	r3, #0
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012aa:	4937      	ldr	r1, [pc, #220]	@ (8001388 <HAL_GPIO_Init+0x2e8>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b8:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012dc:	4a30      	ldr	r2, [pc, #192]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001306:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001330:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800135a:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_GPIO_Init+0x300>)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	3301      	adds	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	f47f ae9d 	bne.w	80010b0 <HAL_GPIO_Init+0x10>
  }
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	48000400 	.word	0x48000400
 8001390:	48000800 	.word	0x48000800
 8001394:	48000c00 	.word	0x48000c00
 8001398:	48001000 	.word	0x48001000
 800139c:	48001400 	.word	0x48001400
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d141      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001412:	4b4b      	ldr	r3, [pc, #300]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800141a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800141e:	d131      	bne.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001420:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001426:	4a46      	ldr	r2, [pc, #280]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800142c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	4b43      	ldr	r3, [pc, #268]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001438:	4a41      	ldr	r2, [pc, #260]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800143e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001440:	4b40      	ldr	r3, [pc, #256]	@ (8001544 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2232      	movs	r2, #50	@ 0x32
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a3f      	ldr	r2, [pc, #252]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	3301      	adds	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001456:	e002      	b.n	800145e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800146a:	d102      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f2      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001472:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147e:	d158      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e057      	b.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001484:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800148a:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001490:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001494:	e04d      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800149c:	d141      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014aa:	d131      	bne.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014b2:	4a23      	ldr	r2, [pc, #140]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2232      	movs	r2, #50	@ 0x32
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e2:	e002      	b.n	80014ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f6:	d102      	bne.n	80014fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f2      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d112      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e011      	b.n	8001534 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001516:	4a0a      	ldr	r2, [pc, #40]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001520:	e007      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001530:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40007000 	.word	0x40007000
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800155a:	6093      	str	r3, [r2, #8]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e2fe      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d075      	beq.n	8001676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158a:	4b97      	ldr	r3, [pc, #604]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001594:	4b94      	ldr	r3, [pc, #592]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d102      	bne.n	80015aa <HAL_RCC_OscConfig+0x3e>
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d002      	beq.n	80015b0 <HAL_RCC_OscConfig+0x44>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	4b8d      	ldr	r3, [pc, #564]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d05b      	beq.n	8001674 <HAL_RCC_OscConfig+0x108>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d157      	bne.n	8001674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e2d9      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x74>
 80015d2:	4b85      	ldr	r3, [pc, #532]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a84      	ldr	r2, [pc, #528]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x98>
 80015ea:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a7e      	ldr	r2, [pc, #504]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a7b      	ldr	r2, [pc, #492]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xb0>
 8001604:	4b78      	ldr	r3, [pc, #480]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a77      	ldr	r2, [pc, #476]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800160a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4b75      	ldr	r3, [pc, #468]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a74      	ldr	r2, [pc, #464]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fb9e 	bl	8000d64 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fb9a 	bl	8000d64 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e29e      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163e:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0xc0>
 800164a:	e014      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb8a 	bl	8000d64 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb86 	bl	8000d64 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	@ 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e28a      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001666:	4b60      	ldr	r3, [pc, #384]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0xe8>
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d075      	beq.n	800176e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001682:	4b59      	ldr	r3, [pc, #356]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168c:	4b56      	ldr	r3, [pc, #344]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d102      	bne.n	80016a2 <HAL_RCC_OscConfig+0x136>
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d002      	beq.n	80016a8 <HAL_RCC_OscConfig+0x13c>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d11f      	bne.n	80016e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	4b4f      	ldr	r3, [pc, #316]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x154>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e25d      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b49      	ldr	r3, [pc, #292]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	4946      	ldr	r1, [pc, #280]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016d4:	4b45      	ldr	r3, [pc, #276]	@ (80017ec <HAL_RCC_OscConfig+0x280>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff faf7 	bl	8000ccc <HAL_InitTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d043      	beq.n	800176c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e249      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d023      	beq.n	8001738 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f0:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a3c      	ldr	r2, [pc, #240]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb32 	bl	8000d64 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fb2e 	bl	8000d64 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e232      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001716:	4b34      	ldr	r3, [pc, #208]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	492d      	ldr	r1, [pc, #180]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
 8001736:	e01a      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001738:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a2a      	ldr	r2, [pc, #168]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800173e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fb0e 	bl	8000d64 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fb0a 	bl	8000d64 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e20e      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175e:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x1e0>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d041      	beq.n	80017fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01c      	beq.n	80017bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	4a17      	ldr	r2, [pc, #92]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fae7 	bl	8000d64 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fae3 	bl	8000d64 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1e7      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0ef      	beq.n	800179a <HAL_RCC_OscConfig+0x22e>
 80017ba:	e020      	b.n	80017fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80017be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff faca 	bl	8000d64 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d2:	e00d      	b.n	80017f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fac6 	bl	8000d64 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d906      	bls.n	80017f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1ca      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ea      	bne.n	80017d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001810:	4b84      	ldr	r3, [pc, #528]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_OscConfig+0x2b4>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x2b6>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b7f      	ldr	r3, [pc, #508]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	@ 0x58
 8001832:	4b7c      	ldr	r3, [pc, #496]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	4b79      	ldr	r3, [pc, #484]	@ (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184e:	4b76      	ldr	r3, [pc, #472]	@ (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a75      	ldr	r2, [pc, #468]	@ (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fa83 	bl	8000d64 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fa7f 	bl	8000d64 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e183      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	4b6c      	ldr	r3, [pc, #432]	@ (8001a28 <HAL_RCC_OscConfig+0x4bc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_RCC_OscConfig+0x32e>
 8001888:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188e:	4a65      	ldr	r2, [pc, #404]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001898:	e024      	b.n	80018e4 <HAL_RCC_OscConfig+0x378>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d110      	bne.n	80018c4 <HAL_RCC_OscConfig+0x358>
 80018a2:	4b60      	ldr	r3, [pc, #384]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a8:	4a5e      	ldr	r2, [pc, #376]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018c2:	e00f      	b.n	80018e4 <HAL_RCC_OscConfig+0x378>
 80018c4:	4b57      	ldr	r3, [pc, #348]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ca:	4a56      	ldr	r2, [pc, #344]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d4:	4b53      	ldr	r3, [pc, #332]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fa3a 	bl	8000d64 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fa36 	bl	8000d64 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e138      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x388>
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff fa23 	bl	8000d64 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fa1f 	bl	8000d64 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e121      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a34      	ldr	r2, [pc, #208]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 800196e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001972:	4a2c      	ldr	r2, [pc, #176]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f9f2 	bl	8000d64 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001984:	f7ff f9ee 	bl	8000d64 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e0f2      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001996:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x418>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff f9d5 	bl	8000d64 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019be:	f7ff f9d1 	bl	8000d64 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0d5      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80c9 	beq.w	8001b7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	f000 8083 	beq.w	8001afc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d15e      	bne.n	8001abc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a08      	ldr	r2, [pc, #32]	@ (8001a24 <HAL_RCC_OscConfig+0x4b8>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f9ab 	bl	8000d64 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	e00c      	b.n	8001a2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f9a7 	bl	8000d64 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d905      	bls.n	8001a2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0ab      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	4b55      	ldr	r3, [pc, #340]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ec      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a38:	4b52      	ldr	r3, [pc, #328]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b52      	ldr	r3, [pc, #328]	@ (8001b88 <HAL_RCC_OscConfig+0x61c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6a11      	ldr	r1, [r2, #32]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001a52:	0212      	lsls	r2, r2, #8
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a5a:	0852      	lsrs	r2, r2, #1
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0552      	lsls	r2, r2, #21
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0652      	lsls	r2, r2, #25
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a72:	06d2      	lsls	r2, r2, #27
 8001a74:	430a      	orrs	r2, r1
 8001a76:	4943      	ldr	r1, [pc, #268]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a40      	ldr	r2, [pc, #256]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b3e      	ldr	r3, [pc, #248]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f966 	bl	8000d64 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f962 	bl	8000d64 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e066      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b35      	ldr	r3, [pc, #212]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x530>
 8001aba:	e05e      	b.n	8001b7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a30      	ldr	r2, [pc, #192]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f94c 	bl	8000d64 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff f948 	bl	8000d64 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04c      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae2:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001aee:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4924      	ldr	r1, [pc, #144]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001af4:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
 8001afa:	e03e      	b.n	8001b7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e039      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <HAL_RCC_OscConfig+0x618>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d12c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	3b01      	subs	r3, #1
 8001b28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d123      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d11b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d113      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3720      	adds	r7, #32
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	019f800c 	.word	0x019f800c
 8001b8c:	feeefffc 	.word	0xfeeefffc

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e11e      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b91      	ldr	r3, [pc, #580]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b8e      	ldr	r3, [pc, #568]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 020f 	bic.w	r2, r3, #15
 8001bbe:	498c      	ldr	r1, [pc, #560]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e106      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d073      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d129      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b81      	ldr	r3, [pc, #516]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0f4      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bfc:	f000 f99e 	bl	8001f3c <RCC_GetSysClockFreqFromPLLSource>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4a7c      	ldr	r2, [pc, #496]	@ (8001df8 <HAL_RCC_ClockConfig+0x268>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d93f      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d033      	beq.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12f      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c2a:	4b72      	ldr	r3, [pc, #456]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c32:	4a70      	ldr	r2, [pc, #448]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e024      	b.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c48:	4b6a      	ldr	r3, [pc, #424]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0c6      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c58:	4b66      	ldr	r3, [pc, #408]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0be      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c68:	f000 f8ce 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4a61      	ldr	r2, [pc, #388]	@ (8001df8 <HAL_RCC_ClockConfig+0x268>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d909      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c76:	4b5f      	ldr	r3, [pc, #380]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c7e:	4a5d      	ldr	r2, [pc, #372]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4957      	ldr	r1, [pc, #348]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f862 	bl	8000d64 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff f85e 	bl	8000d64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e095      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b4e      	ldr	r3, [pc, #312]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d023      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b43      	ldr	r3, [pc, #268]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a42      	ldr	r2, [pc, #264]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001cee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d04:	4a3b      	ldr	r2, [pc, #236]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4936      	ldr	r1, [pc, #216]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b80      	cmp	r3, #128	@ 0x80
 8001d24:	d105      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d26:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4a32      	ldr	r2, [pc, #200]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d21d      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 020f 	bic.w	r2, r3, #15
 8001d48:	4929      	ldr	r1, [pc, #164]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d50:	f7ff f808 	bl	8000d64 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff f804 	bl	8000d64 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e03b      	b.n	8001de6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_RCC_ClockConfig+0x260>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1ed      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4917      	ldr	r1, [pc, #92]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490f      	ldr	r1, [pc, #60]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dba:	f000 f825 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <HAL_RCC_ClockConfig+0x264>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <HAL_RCC_ClockConfig+0x26c>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_RCC_ClockConfig+0x270>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x274>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ff74 	bl	8000ccc <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40022000 	.word	0x40022000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	04c4b400 	.word	0x04c4b400
 8001dfc:	080033e0 	.word	0x080033e0
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000014 	.word	0x20000014

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e047      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e20:	4b27      	ldr	r3, [pc, #156]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e03e      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e32:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d136      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3301      	adds	r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4a16      	ldr	r2, [pc, #88]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e66:	68d2      	ldr	r2, [r2, #12]
 8001e68:	0a12      	lsrs	r2, r2, #8
 8001e6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
      break;
 8001e74:	e00c      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e76:	4a13      	ldr	r2, [pc, #76]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e80:	68d2      	ldr	r2, [r2, #12]
 8001e82:	0a12      	lsrs	r2, r2, #8
 8001e84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e88:	fb02 f303 	mul.w	r3, r2, r3
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0e5b      	lsrs	r3, r3, #25
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	e001      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001eb0:	693b      	ldr	r3, [r7, #16]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	00f42400 	.word	0x00f42400
 8001ec8:	016e3600 	.word	0x016e3600

08001ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee8:	f7ff fff0 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	4904      	ldr	r1, [pc, #16]	@ (8001f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	080033f0 	.word	0x080033f0

08001f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f14:	f7ff ffda 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4904      	ldr	r1, [pc, #16]	@ (8001f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	080033f0 	.word	0x080033f0

08001f3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f42:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d10c      	bne.n	8001f7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f60:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	4a14      	ldr	r2, [pc, #80]	@ (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6a:	68d2      	ldr	r2, [r2, #12]
 8001f6c:	0a12      	lsrs	r2, r2, #8
 8001f6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
    break;
 8001f78:	e00c      	b.n	8001f94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f7a:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4a0e      	ldr	r2, [pc, #56]	@ (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f84:	68d2      	ldr	r2, [r2, #12]
 8001f86:	0a12      	lsrs	r2, r2, #8
 8001f88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
    break;
 8001f92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0e5b      	lsrs	r3, r3, #25
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	016e3600 	.word	0x016e3600
 8001fc4:	00f42400 	.word	0x00f42400

08001fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8098 	beq.w	8002116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	@ 0x58
 8002002:	4b3d      	ldr	r3, [pc, #244]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200e:	2301      	movs	r3, #1
 8002010:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002012:	4b3a      	ldr	r3, [pc, #232]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a39      	ldr	r2, [pc, #228]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800201e:	f7fe fea1 	bl	8000d64 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002024:	e009      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe fe9d 	bl	8000d64 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d902      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	74fb      	strb	r3, [r7, #19]
        break;
 8002038:	e005      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800203a:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ef      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d159      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204c:	4b2a      	ldr	r3, [pc, #168]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002056:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d01e      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	d019      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002068:	4b23      	ldr	r3, [pc, #140]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002074:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	4a1f      	ldr	r2, [pc, #124]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4a1b      	ldr	r2, [pc, #108]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002094:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d016      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fe5d 	bl	8000d64 <HAL_GetTick>
 80020aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e00b      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7fe fe59 	bl	8000d64 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d902      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	74fb      	strb	r3, [r7, #19]
            break;
 80020c4:	e006      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ec      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4903      	ldr	r1, [pc, #12]	@ (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020f0:	e008      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	74bb      	strb	r3, [r7, #18]
 80020f6:	e005      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002104:	7c7b      	ldrb	r3, [r7, #17]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4ba6      	ldr	r3, [pc, #664]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	4aa5      	ldr	r2, [pc, #660]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002122:	4ba0      	ldr	r3, [pc, #640]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002128:	f023 0203 	bic.w	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	499c      	ldr	r1, [pc, #624]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002144:	4b97      	ldr	r3, [pc, #604]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	f023 020c 	bic.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4994      	ldr	r1, [pc, #592]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002166:	4b8f      	ldr	r3, [pc, #572]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	498b      	ldr	r1, [pc, #556]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002188:	4b86      	ldr	r3, [pc, #536]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	4983      	ldr	r1, [pc, #524]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021aa:	4b7e      	ldr	r3, [pc, #504]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	497a      	ldr	r1, [pc, #488]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021cc:	4b75      	ldr	r3, [pc, #468]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4972      	ldr	r1, [pc, #456]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ee:	4b6d      	ldr	r3, [pc, #436]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4969      	ldr	r1, [pc, #420]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002210:	4b64      	ldr	r3, [pc, #400]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4961      	ldr	r1, [pc, #388]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002232:	4b5c      	ldr	r3, [pc, #368]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	4958      	ldr	r1, [pc, #352]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	4950      	ldr	r1, [pc, #320]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002272:	d105      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a4a      	ldr	r2, [pc, #296]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800228c:	4b45      	ldr	r3, [pc, #276]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	4942      	ldr	r1, [pc, #264]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a3c      	ldr	r2, [pc, #240]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022c4:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4934      	ldr	r1, [pc, #208]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b2f      	ldr	r3, [pc, #188]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a2e      	ldr	r2, [pc, #184]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022fc:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230a:	4926      	ldr	r1, [pc, #152]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a20      	ldr	r2, [pc, #128]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002326:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002334:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	4918      	ldr	r1, [pc, #96]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800235e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800236c:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237a:	490a      	ldr	r1, [pc, #40]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800238a:	d105      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002398:	7cbb      	ldrb	r3, [r7, #18]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e042      	b.n	8002440 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7fe fad3 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2224      	movs	r2, #36	@ 0x24
 80023d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fc4a 	bl	8002c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f97b 	bl	80026f4 <UART_SetConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e01b      	b.n	8002440 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 fcc9 	bl	8002dd0 <UART_CheckIdleState>
 800243e:	4603      	mov	r3, r0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245e:	2b20      	cmp	r3, #32
 8002460:	d17b      	bne.n	800255a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_UART_Transmit+0x26>
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e074      	b.n	800255c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2221      	movs	r2, #33	@ 0x21
 800247e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002482:	f7fe fc6f 	bl	8000d64 <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a0:	d108      	bne.n	80024b4 <HAL_UART_Transmit+0x6c>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d104      	bne.n	80024b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	e003      	b.n	80024bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024bc:	e030      	b.n	8002520 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fd2b 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03d      	b.n	800255c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3302      	adds	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	e007      	b.n	800250e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3301      	adds	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1c8      	bne.n	80024be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	2140      	movs	r1, #64	@ 0x40
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fcf4 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e006      	b.n	800255c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
  }
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257a:	2b20      	cmp	r3, #32
 800257c:	f040 80b5 	bne.w	80026ea <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_UART_Receive+0x28>
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0ad      	b.n	80026ec <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2222      	movs	r2, #34	@ 0x22
 800259c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a6:	f7fe fbdd 	bl	8000d64 <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	88fa      	ldrh	r2, [r7, #6]
 80025b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	88fa      	ldrh	r2, [r7, #6]
 80025b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c4:	d10e      	bne.n	80025e4 <HAL_UART_Receive+0x80>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_UART_Receive+0x76>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80025d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025d8:	e02d      	b.n	8002636 <HAL_UART_Receive+0xd2>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	22ff      	movs	r2, #255	@ 0xff
 80025de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025e2:	e028      	b.n	8002636 <HAL_UART_Receive+0xd2>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10d      	bne.n	8002608 <HAL_UART_Receive+0xa4>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <HAL_UART_Receive+0x9a>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	22ff      	movs	r2, #255	@ 0xff
 80025f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80025fc:	e01b      	b.n	8002636 <HAL_UART_Receive+0xd2>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	227f      	movs	r2, #127	@ 0x7f
 8002602:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002606:	e016      	b.n	8002636 <HAL_UART_Receive+0xd2>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002610:	d10d      	bne.n	800262e <HAL_UART_Receive+0xca>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Receive+0xc0>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	227f      	movs	r2, #127	@ 0x7f
 800261e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002622:	e008      	b.n	8002636 <HAL_UART_Receive+0xd2>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	223f      	movs	r2, #63	@ 0x3f
 8002628:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800262c:	e003      	b.n	8002636 <HAL_UART_Receive+0xd2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800263c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002646:	d108      	bne.n	800265a <HAL_UART_Receive+0xf6>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d104      	bne.n	800265a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e003      	b.n	8002662 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002662:	e036      	b.n	80026d2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2200      	movs	r2, #0
 800266c:	2120      	movs	r1, #32
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fc58 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e032      	b.n	80026ec <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10c      	bne.n	80026a6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	b29a      	uxth	r2, r3
 8002694:	8a7b      	ldrh	r3, [r7, #18]
 8002696:	4013      	ands	r3, r2
 8002698:	b29a      	uxth	r2, r3
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	3302      	adds	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e00c      	b.n	80026c0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	8a7b      	ldrh	r3, [r7, #18]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4013      	ands	r3, r2
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3301      	adds	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1c2      	bne.n	8002664 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b08c      	sub	sp, #48	@ 0x30
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	431a      	orrs	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4313      	orrs	r3, r2
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4bab      	ldr	r3, [pc, #684]	@ (80029d0 <UART_SetConfig+0x2dc>)
 8002724:	4013      	ands	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800272c:	430b      	orrs	r3, r1
 800272e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4aa0      	ldr	r2, [pc, #640]	@ (80029d4 <UART_SetConfig+0x2e0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800275c:	4313      	orrs	r3, r2
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800276a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277e:	f023 010f 	bic.w	r1, r3, #15
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a91      	ldr	r2, [pc, #580]	@ (80029d8 <UART_SetConfig+0x2e4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d125      	bne.n	80027e4 <UART_SetConfig+0xf0>
 8002798:	4b90      	ldr	r3, [pc, #576]	@ (80029dc <UART_SetConfig+0x2e8>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d81a      	bhi.n	80027dc <UART_SetConfig+0xe8>
 80027a6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ac <UART_SetConfig+0xb8>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027cd 	.word	0x080027cd
 80027b4:	080027c5 	.word	0x080027c5
 80027b8:	080027d5 	.word	0x080027d5
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027c2:	e0d6      	b.n	8002972 <UART_SetConfig+0x27e>
 80027c4:	2302      	movs	r3, #2
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027ca:	e0d2      	b.n	8002972 <UART_SetConfig+0x27e>
 80027cc:	2304      	movs	r3, #4
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027d2:	e0ce      	b.n	8002972 <UART_SetConfig+0x27e>
 80027d4:	2308      	movs	r3, #8
 80027d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027da:	e0ca      	b.n	8002972 <UART_SetConfig+0x27e>
 80027dc:	2310      	movs	r3, #16
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027e2:	e0c6      	b.n	8002972 <UART_SetConfig+0x27e>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a7d      	ldr	r2, [pc, #500]	@ (80029e0 <UART_SetConfig+0x2ec>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d138      	bne.n	8002860 <UART_SetConfig+0x16c>
 80027ee:	4b7b      	ldr	r3, [pc, #492]	@ (80029dc <UART_SetConfig+0x2e8>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d82d      	bhi.n	8002858 <UART_SetConfig+0x164>
 80027fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <UART_SetConfig+0x110>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002839 	.word	0x08002839
 8002808:	08002859 	.word	0x08002859
 800280c:	08002859 	.word	0x08002859
 8002810:	08002859 	.word	0x08002859
 8002814:	08002849 	.word	0x08002849
 8002818:	08002859 	.word	0x08002859
 800281c:	08002859 	.word	0x08002859
 8002820:	08002859 	.word	0x08002859
 8002824:	08002841 	.word	0x08002841
 8002828:	08002859 	.word	0x08002859
 800282c:	08002859 	.word	0x08002859
 8002830:	08002859 	.word	0x08002859
 8002834:	08002851 	.word	0x08002851
 8002838:	2300      	movs	r3, #0
 800283a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800283e:	e098      	b.n	8002972 <UART_SetConfig+0x27e>
 8002840:	2302      	movs	r3, #2
 8002842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002846:	e094      	b.n	8002972 <UART_SetConfig+0x27e>
 8002848:	2304      	movs	r3, #4
 800284a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800284e:	e090      	b.n	8002972 <UART_SetConfig+0x27e>
 8002850:	2308      	movs	r3, #8
 8002852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002856:	e08c      	b.n	8002972 <UART_SetConfig+0x27e>
 8002858:	2310      	movs	r3, #16
 800285a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285e:	e088      	b.n	8002972 <UART_SetConfig+0x27e>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5f      	ldr	r2, [pc, #380]	@ (80029e4 <UART_SetConfig+0x2f0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d125      	bne.n	80028b6 <UART_SetConfig+0x1c2>
 800286a:	4b5c      	ldr	r3, [pc, #368]	@ (80029dc <UART_SetConfig+0x2e8>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002874:	2b30      	cmp	r3, #48	@ 0x30
 8002876:	d016      	beq.n	80028a6 <UART_SetConfig+0x1b2>
 8002878:	2b30      	cmp	r3, #48	@ 0x30
 800287a:	d818      	bhi.n	80028ae <UART_SetConfig+0x1ba>
 800287c:	2b20      	cmp	r3, #32
 800287e:	d00a      	beq.n	8002896 <UART_SetConfig+0x1a2>
 8002880:	2b20      	cmp	r3, #32
 8002882:	d814      	bhi.n	80028ae <UART_SetConfig+0x1ba>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <UART_SetConfig+0x19a>
 8002888:	2b10      	cmp	r3, #16
 800288a:	d008      	beq.n	800289e <UART_SetConfig+0x1aa>
 800288c:	e00f      	b.n	80028ae <UART_SetConfig+0x1ba>
 800288e:	2300      	movs	r3, #0
 8002890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002894:	e06d      	b.n	8002972 <UART_SetConfig+0x27e>
 8002896:	2302      	movs	r3, #2
 8002898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800289c:	e069      	b.n	8002972 <UART_SetConfig+0x27e>
 800289e:	2304      	movs	r3, #4
 80028a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028a4:	e065      	b.n	8002972 <UART_SetConfig+0x27e>
 80028a6:	2308      	movs	r3, #8
 80028a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ac:	e061      	b.n	8002972 <UART_SetConfig+0x27e>
 80028ae:	2310      	movs	r3, #16
 80028b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028b4:	e05d      	b.n	8002972 <UART_SetConfig+0x27e>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a4b      	ldr	r2, [pc, #300]	@ (80029e8 <UART_SetConfig+0x2f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d125      	bne.n	800290c <UART_SetConfig+0x218>
 80028c0:	4b46      	ldr	r3, [pc, #280]	@ (80029dc <UART_SetConfig+0x2e8>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80028ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80028cc:	d016      	beq.n	80028fc <UART_SetConfig+0x208>
 80028ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80028d0:	d818      	bhi.n	8002904 <UART_SetConfig+0x210>
 80028d2:	2b80      	cmp	r3, #128	@ 0x80
 80028d4:	d00a      	beq.n	80028ec <UART_SetConfig+0x1f8>
 80028d6:	2b80      	cmp	r3, #128	@ 0x80
 80028d8:	d814      	bhi.n	8002904 <UART_SetConfig+0x210>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <UART_SetConfig+0x1f0>
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d008      	beq.n	80028f4 <UART_SetConfig+0x200>
 80028e2:	e00f      	b.n	8002904 <UART_SetConfig+0x210>
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ea:	e042      	b.n	8002972 <UART_SetConfig+0x27e>
 80028ec:	2302      	movs	r3, #2
 80028ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028f2:	e03e      	b.n	8002972 <UART_SetConfig+0x27e>
 80028f4:	2304      	movs	r3, #4
 80028f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028fa:	e03a      	b.n	8002972 <UART_SetConfig+0x27e>
 80028fc:	2308      	movs	r3, #8
 80028fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002902:	e036      	b.n	8002972 <UART_SetConfig+0x27e>
 8002904:	2310      	movs	r3, #16
 8002906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800290a:	e032      	b.n	8002972 <UART_SetConfig+0x27e>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <UART_SetConfig+0x2e0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d12a      	bne.n	800296c <UART_SetConfig+0x278>
 8002916:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <UART_SetConfig+0x2e8>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002924:	d01a      	beq.n	800295c <UART_SetConfig+0x268>
 8002926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800292a:	d81b      	bhi.n	8002964 <UART_SetConfig+0x270>
 800292c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002930:	d00c      	beq.n	800294c <UART_SetConfig+0x258>
 8002932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002936:	d815      	bhi.n	8002964 <UART_SetConfig+0x270>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <UART_SetConfig+0x250>
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002940:	d008      	beq.n	8002954 <UART_SetConfig+0x260>
 8002942:	e00f      	b.n	8002964 <UART_SetConfig+0x270>
 8002944:	2300      	movs	r3, #0
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800294a:	e012      	b.n	8002972 <UART_SetConfig+0x27e>
 800294c:	2302      	movs	r3, #2
 800294e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002952:	e00e      	b.n	8002972 <UART_SetConfig+0x27e>
 8002954:	2304      	movs	r3, #4
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800295a:	e00a      	b.n	8002972 <UART_SetConfig+0x27e>
 800295c:	2308      	movs	r3, #8
 800295e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002962:	e006      	b.n	8002972 <UART_SetConfig+0x27e>
 8002964:	2310      	movs	r3, #16
 8002966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800296a:	e002      	b.n	8002972 <UART_SetConfig+0x27e>
 800296c:	2310      	movs	r3, #16
 800296e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a17      	ldr	r2, [pc, #92]	@ (80029d4 <UART_SetConfig+0x2e0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	f040 80a8 	bne.w	8002ace <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800297e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002982:	2b08      	cmp	r3, #8
 8002984:	d834      	bhi.n	80029f0 <UART_SetConfig+0x2fc>
 8002986:	a201      	add	r2, pc, #4	@ (adr r2, 800298c <UART_SetConfig+0x298>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	080029b1 	.word	0x080029b1
 8002990:	080029f1 	.word	0x080029f1
 8002994:	080029b9 	.word	0x080029b9
 8002998:	080029f1 	.word	0x080029f1
 800299c:	080029bf 	.word	0x080029bf
 80029a0:	080029f1 	.word	0x080029f1
 80029a4:	080029f1 	.word	0x080029f1
 80029a8:	080029f1 	.word	0x080029f1
 80029ac:	080029c7 	.word	0x080029c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b0:	f7ff fa98 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 80029b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80029b6:	e021      	b.n	80029fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <UART_SetConfig+0x2f8>)
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80029bc:	e01e      	b.n	80029fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029be:	f7ff fa23 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 80029c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80029c4:	e01a      	b.n	80029fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80029cc:	e016      	b.n	80029fc <UART_SetConfig+0x308>
 80029ce:	bf00      	nop
 80029d0:	cfff69f3 	.word	0xcfff69f3
 80029d4:	40008000 	.word	0x40008000
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40004400 	.word	0x40004400
 80029e4:	40004800 	.word	0x40004800
 80029e8:	40004c00 	.word	0x40004c00
 80029ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80029fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 812a 	beq.w	8002c58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	4a9e      	ldr	r2, [pc, #632]	@ (8002c84 <UART_SetConfig+0x590>)
 8002a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d305      	bcc.n	8002a34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d903      	bls.n	8002a3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002a3a:	e10d      	b.n	8002c58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	60fa      	str	r2, [r7, #12]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	4a8e      	ldr	r2, [pc, #568]	@ (8002c84 <UART_SetConfig+0x590>)
 8002a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a5e:	f7fd fbdb 	bl	8000218 <__aeabi_uldivmod>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	020b      	lsls	r3, r1, #8
 8002a74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002a78:	0202      	lsls	r2, r0, #8
 8002a7a:	6979      	ldr	r1, [r7, #20]
 8002a7c:	6849      	ldr	r1, [r1, #4]
 8002a7e:	0849      	lsrs	r1, r1, #1
 8002a80:	2000      	movs	r0, #0
 8002a82:	460c      	mov	r4, r1
 8002a84:	4605      	mov	r5, r0
 8002a86:	eb12 0804 	adds.w	r8, r2, r4
 8002a8a:	eb43 0905 	adc.w	r9, r3, r5
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	469a      	mov	sl, r3
 8002a96:	4693      	mov	fp, r2
 8002a98:	4652      	mov	r2, sl
 8002a9a:	465b      	mov	r3, fp
 8002a9c:	4640      	mov	r0, r8
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	f7fd fbba 	bl	8000218 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab2:	d308      	bcc.n	8002ac6 <UART_SetConfig+0x3d2>
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aba:	d204      	bcs.n	8002ac6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	e0c8      	b.n	8002c58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002acc:	e0c4      	b.n	8002c58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad6:	d167      	bne.n	8002ba8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d828      	bhi.n	8002b32 <UART_SetConfig+0x43e>
 8002ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <UART_SetConfig+0x3f4>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002b15 	.word	0x08002b15
 8002af0:	08002b1d 	.word	0x08002b1d
 8002af4:	08002b33 	.word	0x08002b33
 8002af8:	08002b23 	.word	0x08002b23
 8002afc:	08002b33 	.word	0x08002b33
 8002b00:	08002b33 	.word	0x08002b33
 8002b04:	08002b33 	.word	0x08002b33
 8002b08:	08002b2b 	.word	0x08002b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b0c:	f7ff f9ea 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b12:	e014      	b.n	8002b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff f9fc 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8002b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b1a:	e010      	b.n	8002b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c88 <UART_SetConfig+0x594>)
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b20:	e00d      	b.n	8002b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b22:	f7ff f971 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8002b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002b28:	e009      	b.n	8002b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002b30:	e005      	b.n	8002b3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8089 	beq.w	8002c58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c84 <UART_SetConfig+0x590>)
 8002b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b50:	461a      	mov	r2, r3
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b58:	005a      	lsls	r2, r3, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	441a      	add	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d916      	bls.n	8002ba0 <UART_SetConfig+0x4ac>
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b78:	d212      	bcs.n	8002ba0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f023 030f 	bic.w	r3, r3, #15
 8002b82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	8bfb      	ldrh	r3, [r7, #30]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	8bfa      	ldrh	r2, [r7, #30]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	e05b      	b.n	8002c58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ba6:	e057      	b.n	8002c58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d828      	bhi.n	8002c02 <UART_SetConfig+0x50e>
 8002bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb8 <UART_SetConfig+0x4c4>)
 8002bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb6:	bf00      	nop
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002be5 	.word	0x08002be5
 8002bc0:	08002bed 	.word	0x08002bed
 8002bc4:	08002c03 	.word	0x08002c03
 8002bc8:	08002bf3 	.word	0x08002bf3
 8002bcc:	08002c03 	.word	0x08002c03
 8002bd0:	08002c03 	.word	0x08002c03
 8002bd4:	08002c03 	.word	0x08002c03
 8002bd8:	08002bfb 	.word	0x08002bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f7ff f982 	bl	8001ee4 <HAL_RCC_GetPCLK1Freq>
 8002be0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002be2:	e014      	b.n	8002c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be4:	f7ff f994 	bl	8001f10 <HAL_RCC_GetPCLK2Freq>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bea:	e010      	b.n	8002c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bec:	4b26      	ldr	r3, [pc, #152]	@ (8002c88 <UART_SetConfig+0x594>)
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bf0:	e00d      	b.n	8002c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf2:	f7ff f909 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8002bf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bf8:	e009      	b.n	8002c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c00:	e005      	b.n	8002c0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d021      	beq.n	8002c58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <UART_SetConfig+0x590>)
 8002c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	441a      	add	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	d909      	bls.n	8002c52 <UART_SetConfig+0x55e>
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d205      	bcs.n	8002c52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	e002      	b.n	8002c58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3730      	adds	r7, #48	@ 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c82:	bf00      	nop
 8002c84:	080033fc 	.word	0x080033fc
 8002c88:	00f42400 	.word	0x00f42400

08002c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01a      	beq.n	8002da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d8a:	d10a      	bne.n	8002da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b098      	sub	sp, #96	@ 0x60
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002de0:	f7fd ffc0 	bl	8000d64 <HAL_GetTick>
 8002de4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d12f      	bne.n	8002e54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f88e 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d022      	beq.n	8002e54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e22:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e6      	bne.n	8002e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e063      	b.n	8002f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d149      	bne.n	8002ef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f857 	bl	8002f24 <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d03c      	beq.n	8002ef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	623b      	str	r3, [r7, #32]
   return(result);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e6      	bne.n	8002e7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ece:	61fa      	str	r2, [r7, #28]
 8002ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	617b      	str	r3, [r7, #20]
   return(result);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e5      	bne.n	8002eae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e012      	b.n	8002f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3758      	adds	r7, #88	@ 0x58
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	4613      	mov	r3, r2
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f34:	e04f      	b.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d04b      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7fd ff11 	bl	8000d64 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e04e      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d037      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b80      	cmp	r3, #128	@ 0x80
 8002f6a:	d034      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b40      	cmp	r3, #64	@ 0x40
 8002f70:	d031      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d110      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2208      	movs	r2, #8
 8002f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f838 	bl	8002ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2208      	movs	r2, #8
 8002f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e029      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb0:	d111      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f81e 	bl	8002ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e00f      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d0a0      	beq.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b095      	sub	sp, #84	@ 0x54
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800301a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003024:	643b      	str	r3, [r7, #64]	@ 0x40
 8003026:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800302a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e6      	bne.n	8003006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	61fb      	str	r3, [r7, #28]
   return(result);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3308      	adds	r3, #8
 800305a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800305c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e3      	bne.n	8003038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d118      	bne.n	80030aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	60bb      	str	r3, [r7, #8]
   return(result);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f023 0310 	bic.w	r3, r3, #16
 800308c:	647b      	str	r3, [r7, #68]	@ 0x44
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6979      	ldr	r1, [r7, #20]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	613b      	str	r3, [r7, #16]
   return(result);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e6      	bne.n	8003078 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80030be:	bf00      	nop
 80030c0:	3754      	adds	r7, #84	@ 0x54
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80030dc:	2302      	movs	r3, #2
 80030de:	e027      	b.n	8003130 <HAL_UARTEx_DisableFifoMode+0x66>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	@ 0x24
 80030ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800310e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e02d      	b.n	80031b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	@ 0x24
 8003160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f84f 	bl	8003234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e02d      	b.n	800322c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	@ 0x24
 80031dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f811 	bl	8003234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003254:	e031      	b.n	80032ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003256:	2308      	movs	r3, #8
 8003258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800325a:	2308      	movs	r3, #8
 800325c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	0e5b      	lsrs	r3, r3, #25
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	0f5b      	lsrs	r3, r3, #29
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	7b3a      	ldrb	r2, [r7, #12]
 8003282:	4911      	ldr	r1, [pc, #68]	@ (80032c8 <UARTEx_SetNbDataToProcess+0x94>)
 8003284:	5c8a      	ldrb	r2, [r1, r2]
 8003286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800328a:	7b3a      	ldrb	r2, [r7, #12]
 800328c:	490f      	ldr	r1, [pc, #60]	@ (80032cc <UARTEx_SetNbDataToProcess+0x98>)
 800328e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003290:	fb93 f3f2 	sdiv	r3, r3, r2
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	7b7a      	ldrb	r2, [r7, #13]
 80032a0:	4909      	ldr	r1, [pc, #36]	@ (80032c8 <UARTEx_SetNbDataToProcess+0x94>)
 80032a2:	5c8a      	ldrb	r2, [r1, r2]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80032a8:	7b7a      	ldrb	r2, [r7, #13]
 80032aa:	4908      	ldr	r1, [pc, #32]	@ (80032cc <UARTEx_SetNbDataToProcess+0x98>)
 80032ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	08003414 	.word	0x08003414
 80032cc:	0800341c 	.word	0x0800341c

080032d0 <memset>:
 80032d0:	4402      	add	r2, r0
 80032d2:	4603      	mov	r3, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <strncmp>:
 80032e0:	b510      	push	{r4, lr}
 80032e2:	b16a      	cbz	r2, 8003300 <strncmp+0x20>
 80032e4:	3901      	subs	r1, #1
 80032e6:	1884      	adds	r4, r0, r2
 80032e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d103      	bne.n	80032fc <strncmp+0x1c>
 80032f4:	42a0      	cmp	r0, r4
 80032f6:	d001      	beq.n	80032fc <strncmp+0x1c>
 80032f8:	2a00      	cmp	r2, #0
 80032fa:	d1f5      	bne.n	80032e8 <strncmp+0x8>
 80032fc:	1ad0      	subs	r0, r2, r3
 80032fe:	bd10      	pop	{r4, pc}
 8003300:	4610      	mov	r0, r2
 8003302:	e7fc      	b.n	80032fe <strncmp+0x1e>

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	4d0d      	ldr	r5, [pc, #52]	@ (800333c <__libc_init_array+0x38>)
 8003308:	4c0d      	ldr	r4, [pc, #52]	@ (8003340 <__libc_init_array+0x3c>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	2600      	movs	r6, #0
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	4d0b      	ldr	r5, [pc, #44]	@ (8003344 <__libc_init_array+0x40>)
 8003316:	4c0c      	ldr	r4, [pc, #48]	@ (8003348 <__libc_init_array+0x44>)
 8003318:	f000 f818 	bl	800334c <_init>
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	2600      	movs	r6, #0
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	0800342c 	.word	0x0800342c
 8003340:	0800342c 	.word	0x0800342c
 8003344:	0800342c 	.word	0x0800342c
 8003348:	08003430 	.word	0x08003430

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
